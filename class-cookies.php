<?php
/**
 * GlimFSE Framework.
 *
 * WARNING: This file is part of the core GlimFSE Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	GlimFSE Framework
 * @subpackage 	Support\Modules\Cookies
 * @copyright   Copyright (c) 2024, GlimFSE Framework
 * @since 		6.5.2
 * @version		6.5.7
 */

namespace GlimFSE\Support\Modules;

defined( 'ABSPATH' ) || exit;

use GlimFSE\Config\Traits\Singleton;
use GlimFSE\Config\interfaces\Integration;

use GlimFSE\Config\Traits\{ Asset, No_Conditionals };
use function GlimFSE\Functions\{ get_prop, toJSON, get_lightness_limit };

/**
 * The Cookies object.
 */
final class Cookies implements Integration {

    use Asset;
    use Singleton;
	use No_Conditionals;
	use Cookies\Helpers;

	const CACHE 	= 'glimfse/support/cookies';
	const CONTEXT 	= 'glim-cookies';

	const SLUGS		= [
		'glimfse' => 'glimfse/glimfse',
		'offcanvas' => 'cookies-offcanvas',
		'message'	=> 'cookies-message',
	];

	const CLASSES 	= [
		'set' 		=> 'wp-cookies-set',
		'status' 	=> 'wp-cookies-status',
		'allow' 	=> 'wp-cookies-allow',
	];

    /**
	 * Vars
	 */
	protected $config;
	protected $cookie;
	public $manager;

	/**
	 * Send to Constructor
	 */
	public function init() {
		$this->cookie 	= [];
		$this->config 	= wp_parse_args( glimfse_option( 'cookies' ), self::get_defaults() );
		$this->manager 	= Cookies\Manager::get_instance();
	}

	/**
	 * Hooks
	 */
	public function register_hooks() {
		\add_action( 'admin_init',						[ $this, 'insert_defaults'	] );
		\add_action( 'admin_enqueue_scripts',			[ $this, 'admin_assets' 	] );
		\add_action( 'init',							[ $this, 'front_assets' 	] );
		\add_filter( 'init', 							[ $this, 'register_pattern'	] );
		\add_action( 'init',                			[ $this, 'markup' 			] );
		\add_action( 'wp_loaded', 						[ $this, 'block_cookies' 	] );
		\add_filter( 'default_wp_template_part_areas', 	[ $this, 'template_area' 	] );
		\add_filter( 'body_class', 						[ $this, 'body_class' 		] );
	}

	/**
	 * Add new body classes.
	 *
	 * @param 	array $classes Body classes
	 *
	 * @return 	array
	 */
	public function body_class( $classes ): array {
		if ( is_admin() ) {
			return $classes;
		}

		$cookie = get_prop( $_COOKIE, 'wp-cookies-status' );

		if ( $cookie ) {
			$classes[] = self::CLASSES['set'];

			if ( filter_var( $cookie, FILTER_VALIDATE_BOOLEAN ) === true ) {
				$classes[] = self::CLASSES['allow'];
			}
		}

		return $classes;
	}

	/**
	 * Block cookies
	 *
	 * @return void
	 */
	public function block_cookies(): void {
		$this->cookie = $_COOKIE;

		if ( current_user_can( 'manage_options' ) ) {
			return;
		}
	
		$allowed 	= get_prop( $_COOKIE, [ 'wp-cookies-status' ] );
		$blocked 	= get_prop( $_COOKIE, [ 'wp-cookies-blocked' ] );
		$blocking 	= get_prop( $this->config, [ 'cookies', 'block' ] );
	
		if ( ( ! $allowed && $blocking ) || filter_var( $allowed, FILTER_VALIDATE_BOOLEAN ) === false ) {
			// Block cookies if not accepted yet or declined
			$this->remove_specific_cookies();
		} elseif ( $blocking && ! empty( $blocked ) ) {
			// Block user defined cookies if accepted
			$this->remove_specific_cookies( $blocked );
		}
	}

	/**
	 * Display cookies.
	 *
	 * @return 	string
	 */
	public function display_cookies(): string {
		$will_block	= get_prop( $this->config, [ 'cookies', 'block' ] ) === true;
		$is_allowed	= filter_var( get_prop( $this->cookie, [ 'wp-cookies-status' ] ), FILTER_VALIDATE_BOOLEAN );

		// Blocked cookies.
		$blocked 		= array_unique( array_map( 'trim', explode( ',', get_prop( $this->cookie, [ 'wp-cookies-blocked' ], '' ) ) ) );
		// All cookies.
		$cookies		= array_keys( $this->manager->all() );

		sort( $cookies );

		list( $names, $families ) 	= $this->get_necessary_cookies();

		$result 	= [];
		$necessary 	= [];
		$other 		= [];

		// Merge cookie information
		foreach ( $cookies as $name ) {
			$data = wp_parse_args( [
				'isNecessary' => $this->is_necessary_cookie( $name, $names, $families )
			], $this->manager->get( $name, [] ) );
		
			if ( $data['isNecessary'] ) {
				$necessary[$name] = $data;
			} else {
				$other[$name] = $data;
			}
		}
		
		$result = array_merge( $necessary, $other );

		// Assets
		\glimfse( 'styles' )->Utilities->load( [ 'position-relative' ] );
		\wp_enqueue_style( 'wp-block-table' );

		if( get_prop( $this->config, [ 'toast', 'enable' ] ) ) {
			\glimfse( 'toasts' );
			\wp_enqueue_script( 'glimfse-support-assets-template' );
			\wp_enqueue_script( 'glimfse-support-assets-toast' );
		}

		\wp_add_inline_script( $this->make_handle(), <<<JS
			// Modal
			(function() {
				const cookiesModal = Selector.findOne('#wp-cookies-modal');
				
				Events.on(cookiesModal, 'hide.wp.modal', function ({ relatedTarget = {} }) {
					const { value } = relatedTarget?.dataset || {};

					if( ['false', 'true', 'save'].includes(value) ) {
						const { Cookies } = glimfse;

						Selector.findOne('body').classList[value === 'false' ? 'remove' : 'add'](cookiesClasses?.allow);
						
						Cookies.setChoices(value);
						
						if(cookiesToast?.enable) {
							glimfseCookieToast(value);
						}
					}
				});
			})();
		JS, 'after' );

		ob_start();
		?>
		<form class="position-relative" name="wp-cookies">
			<table class="wp-cookies-table is-style-stripes table-bordered table-hover">
				<thead class="has-accent-background-color">
					<tr>
						<th><?php esc_html_e( 'Cookie', 'glimfse' ); ?></th>
						<th><?php esc_html_e( 'Duration', 'glimfse' ); ?></th>
						<th class="has-text-align-center"><?php esc_html_e( 'Status', 'glimfse' ); ?></th>
					</tr>
				</thead>
				<tbody class="has-small-font-size"><?php
					foreach ( $result as $name => $props ) {
						$necessary 	= get_prop( $props, [ 'isNecessary' ] );
						$category 	= get_prop( $props, [ 'category' ], $necessary ? 'necessary' : 'other' );
						$in_blocked	= in_array( $name, $blocked, true );
						$selected	= ( ! $is_allowed || $will_block && $in_blocked ) ? false : true;
					?><tr class="wp-cookies-table__item" data-category="<?php echo esc_attr( $category ?: 'other' ); ?>">
						<?php if( $description = get_prop( $props, [ 'description' ] ) ) : ?>
						<td 
							class="wp-cookies-table__item-name has-floating notranslate"
							data-wp-context="<?php echo esc_attr( toJSON( [
								'container'	=> '#wp-cookies-modal',
								'title'		=> $description,
							] ) ); ?>"
						>
						<?php else : ?><td class="wp-cookies-table__item-name notranslate"><?php
						
						endif;

						echo esc_html( $name );
						
						?></td>
						<td class="wp-cookies-table__item-duration"><?php
						
							echo esc_html( get_prop( $props, [ 'duration' ], '-' ) );
						
						?></td>
						<?php if( $necessary ) : ?>
						<td 
							class="wp-cookies-table__item-status has-text-align-center has-floating"
							data-wp-context="<?php echo esc_attr( toJSON( [
								'container'	=> '#wp-cookies-modal',
								'title'		=> esc_html__( 'This cookie is strictly necessary and cannot be disabled.', 'glimfse' )
							] ) ); ?>"
						><?php else : ?><td class="wp-cookies-table__item-status has-text-align-center"><?php
						endif;

							glimfse_input( 'toggle', [
								'type'	=> 'checkbox',
								'attrs' => [
									'class'		=> 'form-check-inline form-switch',
									'name'		=> 'wp-cookies[]',
									'value'		=> $necessary ? null : $name,
									'checked'  	=> $necessary || $selected ? 'checked' : null,
									'disabled'  => $necessary ? 'disabled' : null,
								]
							] );

						?></td>
					</tr><?php
					}
				?></tbody>
			</table>
		</form><?php

		return ob_get_clean();
	}

	/**
	 * Display actions.
	 *
	 * @param	string 	$module
	 *
	 * @return 	string
	 */
	public function display_actions( string $module = 'buttons' ): string {
		ob_start();
		switch( $module ) :
			case 'filters':
				\glimfse( 'styles' )->Utilities->load( [ 'my-3' ] );
				\wp_add_inline_script( $this->make_handle(), <<<JS
					// Cookies filters
					(function() {
						const cookiesModal = Selector.findOne('#wp-cookies-modal');
						const searchInputFld = Selector.findOne('input[name="wp-cookies-search"]', cookiesModal);
						const categoryChange = Selector.findOne('select[name="wp-cookies-categories"]', cookiesModal);
						const allCookiesRows = Selector.find('.wp-cookies-table__item', cookiesModal);
						const hideAllCookies = () => allCookiesRows.map(el => el.style.display = 'none');
						const handleUserInpt = ({ textContent, dataset: { category } }, search, select) => {
							textContent = textContent.toLowerCase();
							if(select !== 'null') {
								return (category === select && textContent.includes(search));
							}

							return (textContent.includes(search));
						};

						Events.on(searchInputFld, 'input', ({ target: { value } }) => {
							value = value.toLowerCase();
							
							hideAllCookies();
							allCookiesRows.filter(el => handleUserInpt(el, value, categoryChange.value)).map(el => el.removeAttribute('style'));
						});

						Events.on(categoryChange, 'change', ({ target: { value } }) => {
							hideAllCookies();
							allCookiesRows.filter(el=> handleUserInpt(el, searchInputFld.value ,value)).map(el => el.removeAttribute('style'));
						});
					})();
				JS, 'after' );
		?>
		<div class="grid my-3" style="--wp--columns: 2">
			<?php
					
				\glimfse_input( 'floating', [
					'type'		=> 'search',
					'label'		=> esc_html__( 'Cookie name', 'glimfse' ),
					'attrs'		=> [
						'placeholder' 	=> ' ',
						'name'			=> 'wp-cookies-search'
					]
				] );
				
				\glimfse_input( 'floating', [
					'type'		=> 'select',
					'label'		=> esc_html__( 'Category', 'glimfse' ),
					'attrs'		=> [
						'name'	=> 'wp-cookies-categories'
					],
					'choices'	=> $this->get_categories()
				] );

			?>
		</div>
		<?php
			break;
			default:
				\glimfse( 'styles' )->Utilities->load( [ 'justify-content-between' ] );

				$attributes = [
					'class' 		=> 'wp-element-button has-small-font-size has-accent-background-color has-dark-color',
					'data-wp-close'	=> 'modal',
					'type'			=> 'button',
				];
		?>
		<div class="wp-block-buttons justify-content-between">
			<div class="wp-block-button"><?php
				
				glimfse_input( 'button', [
					'label' => __( 'Reject all', 'glimfse' ),
					'attrs' => wp_parse_args( [
						'data-value'	=> 'false',
					], $attributes ),
				] );

			?></div>
			<div class="wp-block-button"><?php
				
				glimfse_input( 'button', [
					'label' => __( 'Confirm choices', 'glimfse' ),
					'attrs' => wp_parse_args( [
						'data-value'	=> 'save',
					], $attributes ),
				] );

			?></div>
			<div class="wp-block-button"><?php
			
				glimfse_input( 'button', [
					'label' => __( 'Save & Accept all', 'glimfse' ),
					'attrs' => wp_parse_args( [
						'class' 		=> 'wp-element-button has-success-background-color has-dark-color',
						'data-value'	=> 'true',
					], $attributes ),
				] );

			?></div>
		</div>
		<?php
		break;
		endswitch;

		return apply_filters( 'glimfse/filter/support/cookies/' . $module, ob_get_clean() );
	}
	
	/**
	 * Markup
	 *
	 * @return 	void
	 */
	public function markup(): void {
		$template 	= $this->get_content( self::SLUGS['offcanvas'] );
		$settings 	= null;

		// Process actions
		$p = glimfse( 'dom' )::processor( $template );
		$p->next_tag();
		$p->set_bookmark( 'dom-start' );
			
		if( $p->next_tag( [
			'tag_name' 		=> 'div',
			'class_name'	=> 'js-accept'
		] ) ) {
			$p->next_tag( 'a' );
			$p->set_attribute( 'data-wp-close', 'offcanvas' );
			$p->set_attribute( 'data-value', 'true' );
		}

		$p->seek( 'dom-start' );
		if( $p->next_tag( [
			'tag_name' 		=> 'div',
			'class_name'	=> 'js-decline'
		] ) ) {
			$p->next_tag( 'a' );
			$p->set_attribute( 'data-wp-close', 'offcanvas' );
			$p->set_attribute( 'data-value', 'false' );
		}

		$p->seek( 'dom-start' );
		if( $p->next_tag( [
			'tag_name' 		=> 'div',
			'class_name'	=> 'js-settings'
		] ) ) {
			$settings = 'wp-cookies';

			$backdrop	= get_prop( $this->config, [ 'modal', 'backdrop' ] );

			$p->next_tag( 'a' );
			$p->set_attribute( 'aria-controls', '#' . $settings . '-modal' );
			$p->set_attribute( 'data-wp-interactive', 'glimfse/modal' );
			$p->set_attribute( 'data-wp-context', toJSON( [
				'keyboard'	=> filter_var( get_prop( $this->config, [ 'modal', 'keyboard' ] ), FILTER_VALIDATE_BOOLEAN ),
				'backdrop' 	=> $backdrop === 'static' ? 'static' : filter_var( $backdrop, FILTER_VALIDATE_BOOLEAN ),
			] ) );
			$p->set_attribute( 'data-wp-init--validate', 'callbacks.validateConfig' );
			$p->set_attribute( 'data-wp-init--setup', 'callbacks.onInit' );
			$p->set_attribute( 'data-wp-on--click', 'actions.show' );
			$p->set_attribute( 'data-wp-on-window--resize', 'callbacks.onResize' );

			if( filter_var( get_prop( $this->config, [ 'modal', 'closeOffcanvas' ] ), FILTER_VALIDATE_BOOLEAN ) ) {
				$p->set_attribute( 'data-wp-close', 'offcanvas' );
			}
		}

		$markup = '';
		// Toggler
		$backdrop	= get_prop( $this->config, [ 'offcanvas', 'backdrop' ] );
		
		$markup .= glimfse_template( 'general/toggler', [
			'id'		=> 'wp-cookies',
			'class'		=> [ 'wp-element-button', 'wp-element-button--cookies' ],
			'toggle' 	=> 'offcanvas',
			'icon'		=> [
				'viewBox' 	=> '0 0 512 512',
				'paths'		=> [
					'M257.5 27.6c-.8-5.4-4.9-9.8-10.3-10.6v0c-22.1-3.1-44.6 .9-64.4 11.4l-74 39.5C89.1 78.4 73.2 94.9 63.4 115L26.7 190.6c-9.8 20.1-13 42.9-9.1 64.9l14.5 82.8c3.9 22.1 14.6 42.3 30.7 57.9l60.3 58.4c16.1 15.6 36.6 25.6 58.7 28.7l83 11.7c22.1 3.1 44.6-.9 64.4-11.4l74-39.5c19.7-10.5 35.6-27 45.4-47.2l36.7-75.5c9.8-20.1 13-42.9 9.1-64.9v0c-.9-5.3-5.3-9.3-10.6-10.1c-51.5-8.2-92.8-47.1-104.5-97.4c-1.8-7.6-8-13.4-15.7-14.6c-54.6-8.7-97.7-52-106.2-106.8zM208 144a32 32 0 1 1 0 64 32 32 0 1 1 0-64zM144 336a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm224-64a32 32 0 1 1 0 64 32 32 0 1 1 0-64z'
				]
			],
			'options'	=> [
				'isOpen' 	=> false,
				'scroll' 	=> filter_var( get_prop( $this->config, [ 'offcanvas', 'scroll' ] ), FILTER_VALIDATE_BOOLEAN ),
				'keyboard' 	=> filter_var( get_prop( $this->config, [ 'offcanvas', 'keyboard' ] ), FILTER_VALIDATE_BOOLEAN ),
				'backdrop'	=> $backdrop === 'static' ? 'static' : filter_var( $backdrop, FILTER_VALIDATE_BOOLEAN )
			]
		], false );

		// Offcanvas
		$classnames = [
			'wp-offcanvas--' . get_prop( $this->config, [ 'offcanvas', 'position' ] ),
			'wp-offcanvas--cookies',
		];

		$background = get_prop( $this->config, [ 'offcanvas', 'style', 'backgroundColor' ], '#ffffff' );
		$background = glimfse( 'styles' )::hex_to_rgb( $background, 1, true );
		$luminance 	= glimfse( 'styles' )::rgb_luminance( $background );

		$classnames[] = ( $luminance < get_lightness_limit() ) ? 'theme-is-dark' : 'theme-is-light';

		$markup .= glimfse_template( 'general/offcanvas', [
			'id'		=> 'wp-cookies',
			'close'		=> get_prop( $this->config, [ 'offcanvas', 'close' ] ),
			'class'		=> $classnames,
			'title'		=> apply_filters( 'glimfse/filter/support/cookies/offcanvas/title', get_prop( $this->config, [ 'offcanvas', 'title' ] ) ),
			'content'	=> $p->get_updated_html()
		], false );

		\add_action( 'wp_footer', static function() use ( $markup ) {
			echo $markup;
		}, 0 );

		if( ! is_null( $settings ) ) {
			\add_action( 'wp_loaded', function() use( $settings ) {
				$intro 		= $this->get_content( self::SLUGS['message'] );
				$filters 	= $this->display_actions( 'filters' );
				$table 		= $this->display_cookies();
				$buttons	= $this->display_actions( 'buttons' );

				// Parse markup for tooltips if we have the module.
				if( glimfse( 'support' )->has( 'modules/formatting' ) ) {
					$table = glimfse( 'support' )->get( 'modules/formatting' )::get_instance()->render_block( $table, [
						'blockName' => 'core/table'
					] );
				}

				$content = $intro . $filters . $table;

				$classes = [ 'wp-modal--cookies', 'wp-modal--fullscreen:sm', 'wp-modal__dialog--scrollable' ];
				$classes[] = 'wp-modal__dialog--' . get_prop( $this->config, [ 'modal', 'position' ] );
				$classes[] = 'fade';
				
				glimfse_template( 'general/modal', [
					'id'		=> $settings,
					'classes'	=> $classes,
					'close'		=> get_prop( $this->config, [ 'modal', 'close' ] ),
					'title'		=> apply_filters( 'glimfse/filter/support/cookies/modal/title', get_prop( $this->config, [ 'modal', 'title' ] ) ),
					'content' 	=> $content,
					'footer'	=> $buttons
				] );
			}, PHP_INT_MAX );
		} 
	}

	/**
	 * Frontend assets.
	 *
	 * @return void
	 */
	public function front_assets(): void {
		$dynamic_css = '';

		// Toggler CSS.
		$position 			= get_prop( $this->config, [ 'toggler', 'position'	] );
		$offfset			= get_prop( $this->config, [ 'toggler', 'style', 'left' ] );
		$offfset 			= $position === 'right' ? "calc({$offfset}px + var(--wp--scrollbar-width, 0px))" : $offfset;
		$bottom 			= get_prop( $this->config, [ 'toggler', 'style', 'bottom' 	] );
		$padding 			= get_prop( $this->config, [ 'toggler', 'style', 'padding' 	] );
		$width 				= get_prop( $this->config, [ 'toggler', 'style', 'width' 	] );
		$height 			= get_prop( $this->config, [ 'toggler', 'style', 'height' 	] );
		$color 				= get_prop( $this->config, [ 'toggler', 'style', 'color' 	] );
		$border_style 		= get_prop( $this->config, [ 'toggler', 'style', 'border', 'style' 	], '' );
		$border_width 		= get_prop( $this->config, [ 'toggler', 'style', 'border', 'width' 	], '' );
		$border_color 		= get_prop( $this->config, [ 'toggler', 'style', 'border', 'color' 	], '' );
		$border_radius 		= get_prop( $this->config, [ 'toggler', 'style', 'borderRadius' 	], 0 );
		$background_color 	= get_prop( $this->config, [ 'toggler', 'style', 'backgroundColor' 	], '' );

		$dynamic_css .= "
			#wp-cookies-toggle {
				position: fixed;
				z-index: 5;
				{$position}: {$offfset};
				bottom: {$bottom}px;
				padding: {$padding}px;
				width: {$width}px;
				height: {$height}px;
				color: {$color};
				border-style: {$border_style};
				border-width: {$border_width};
				border-color: {$border_color};
				border-radius: {$border_radius}px;
				background-color: {$background_color};
			}
		";

		// OffCanvas CSS
		$offcanvas_color	= get_prop( $this->config, [ 'offcanvas', 'style', 'color' ], '' );
		$offcanvas_bg_color	= get_prop( $this->config, [ 'offcanvas', 'style', 'backgroundColor' ], '' );
		$offcanvas_br_color	= $offcanvas_bg_color ? glimfse('styles')::hex_brightness( $offcanvas_bg_color, -25 ) : '';

		$dynamic_css .= "
			.wp-offcanvas.wp-offcanvas--cookies {
				--wp--offcanvas-bg: {$offcanvas_bg_color};
				--wp--offcanvas-border-color: {$offcanvas_br_color};
				--wp--offcanvas-color: {$offcanvas_color};
				height: auto;
			}
		";

		if ( get_prop( $this->config, [ 'offcanvas', 'title' ] ) || get_prop( $this->config, [ 'offcanvas', 'close'] ) === true ) {
			$dynamic_css .= <<<CSS
				.wp-offcanvas.wp-offcanvas--cookies .wp-offcanvas__body {
					padding-top: 0;
				}
			CSS;
		}
		
		// Modal CSS
		$modal_color 		= get_prop( $this->config, [ 'modal', 'style', 'color' ], '' );
		$modal_background 	= get_prop( $this->config, [ 'modal', 'style', 'backgroundColor' ], '' );
		$modal_darker_bg 	= $modal_background ? glimfse( 'styles' )::hex_brightness( $modal_background, -25 ) : '';
		$modal_darker_br 	= $modal_background ? "1px solid {$modal_darker_bg}" : '';

		$dynamic_css .= "
			.wp-modal.wp-modal--cookies .wp-modal__dialog {
				--wp--modal-bg: {$modal_background};
				--wp--modal-color: {$modal_color};
				--wp--modal-border-color: {$modal_darker_bg};
				--wp--modal-header-bg: {$modal_darker_bg};
				--wp--modal-header-border-color: {$modal_darker_bg};
				--wp--modal-footer-border-color: {$modal_darker_bg};
				--wp--preset--color--accent: {$modal_darker_bg};
				--wp--input--background-color: {$modal_darker_bg};
				--wp--input--border: {$modal_darker_br};
				--wp--input--border-color-focus: {$modal_color};
				--wp--preset--color--primary: {$modal_color};
			}
		";

		\wp_style_engine_get_styles( [], [
			'context'	=> self::CONTEXT
		] );

		\glimfse( 'assets' )->add_style( 'wp-style-engine-' . self::CONTEXT, [
			'inline'	=> 'file:' . $this->get_asset( 'css', 'front' ),
		] );

		foreach( glimfse( 'styles' )::string_to_array( $dynamic_css ) as $selector => $declarations ) {
			\WP_Style_Engine::store_css_rule( self::CONTEXT, $selector, $declarations );
		}

		// Scripts.
		\glimfse( 'assets' )->add_script( $this->make_handle(), [
			'path' 		=> $this->get_asset( 'js', 'front' ),
			'locale'	=> [
				'classes' 		=> self::CLASSES,
				'cookiePath' 	=> COOKIEPATH,
				'cookies'		=> get_prop( $this->config, [ 'cookies' ], [] ),
				'toast'			=> get_prop( $this->config, [ 'toast' ], [] )
			],
		] );

		\wp_add_inline_script( $this->make_handle(), <<<JS
			// Cookies vars
			const { Selector, Events, Cookies } = glimfse;
			const { toast: cookiesToast = {}, classes: cookiesClasses = [] } = glimfseSupportModulesCookies || {};
		JS, 'after' );

		if( get_prop( $this->config, [ 'toast', 'enable' ] ) ) {
			\wp_add_inline_script( $this->make_handle(), <<<JS
				// Cookies toast
				const { plugins: { Toast }, Template } = glimfse;
				const glimfseCookieToast = (value = '') => {
					if(!value) {
						return;
					}

					const isConfirmed = value !== 'false';

					const template = new Template({
						content: {
							'.wp-toast__header-text': isConfirmed ? cookiesToast?.confirm : cookiesToast?.reject,
							'.wp-toast__body': null,
						},
						extraClass: isConfirmed ? 'has-success-background-color' : 'has-danger-background-color',
						template: Selector.findOne('#wp-toast-template').innerHTML
					}).toHtml();
					
					Selector.findOne('.wp-site-toasts')?.appendChild(template);
	
					return new Toast(template, { delay: parseInt(cookiesToast?.delay) }).show();
				}
			JS, 'after' );
		}

		\wp_add_inline_script( $this->make_handle(), <<<JS
			// Offcanvas
			(function() {
				const body = Selector.findOne('body');
				const cookiesNote = Selector.findOne('#wp-cookies-offcanvas');

				Events.on(cookiesNote, 'hide.wp.offcanvas', function ({ relatedTarget = {} }) {
					const { value } = relatedTarget?.dataset || {};
					if (['false', 'true'].includes(value)) {
						body.classList.add(cookiesClasses?.set);
						body.classList[value === 'true' ? 'add' : 'remove'](cookiesClasses?.allow);

						Cookies.setChoices(value);

						if(cookiesToast?.enable) {
							glimfseCookieToast(value);
						}
					}
				});
			})();
		JS, 'after' );
	}

	/**
	 * Admin assets.
	 *
	 * @return void
	 */
	public function admin_assets(): void {
		if( ! glimfse_if( 'is_theme_admin' ) || ! current_user_can( 'activate_plugins' ) ) {
			return;
		}

		\wp_register_script( 
			$this->make_handle( 'admin' ),
			$this->get_asset( 'js', 'admin' ),
			[ 'glimfse-admin' ],
			glimfse( 'version' ),
			true 
		);

		\wp_enqueue_script( $this->make_handle( 'admin' ) );

		\wp_localize_script( $this->make_handle( 'admin' ), 'glimfseCookies', [
			'categories' => $this->get_categories()
		] );

		\wp_set_script_translations( $this->make_handle( 'admin' ), 'glimfse', glimfse_config( 'directories' )['languages'] );
	}

	/**
	 * Register pattern.
	 *
	 * @return void
	 */
	public function register_pattern(): void {
		register_block_pattern( 'glimfse/' . self::SLUGS['message'], [
			'title'       	=> __( 'Cookies message', 'glimfse' ),
			'description' 	=> _x( 'Default cookie policy message.', 'Block pattern description', 'glimfse' ),
			'inserter'		=> false,
			'content' 		=> '
				<!-- wp:paragraph -->
				<p>' . sprintf( 
					esc_html__( 'We use cookies to enhance your browsing experience. By continuing to navigate, you consent to our use of cookies. View %s.', 'glimfse' ),
					get_the_privacy_policy_link( ' ' )
				) . '</p>
				<!-- /wp:paragraph -->
			'
		] );

		register_block_pattern( 'glimfse/' . self::SLUGS['offcanvas'], [
			'title'       	=> __( 'Cookies offcanvas', 'glimfse' ),
			'description' 	=> _x( 'Default cookie policy message and actions.', 'Block pattern description', 'glimfse' ),
			'inserter'		=> false,
			'content' 		=> '
				<!-- wp:columns {"verticalAlignment":"center"} -->
				<div class="wp-block-columns are-vertically-aligned-center">
					<!-- wp:column {"verticalAlignment":"center","className":"col-12 col-sm"} -->
					<div class="wp-block-column is-vertically-aligned-center col-12 col-sm">
						<!-- wp:pattern {"slug":"glimfse/' . self::SLUGS['message'] . '"} /-->
					</div>
					<!-- /wp:column -->
					<!-- wp:column {"verticalAlignment":"center","className":"col-12 col-sm-auto"} -->
					<div class="wp-block-column is-vertically-aligned-center col-12 col-sm-auto">
						<!-- wp:buttons -->
						<div class="wp-block-buttons">
							<!-- wp:button {"backgroundColor":"accent","className":"js-settings","style":{"spacing":{"padding":{"top":"var:preset|spacing|xs","bottom":"var:preset|spacing|xs"}}}} -->
							<div class="wp-block-button js-settings">
								<a class="wp-block-button__link has-accent-background-color has-background wp-element-button" style="padding-top:var(--wp--preset--spacing--xs);padding-bottom:var(--wp--preset--spacing--xs)">' . esc_html__( 'Manage Settings', 'glimfse' ) . '</a>
							</div>
							<!-- /wp:button -->
							<!-- wp:button {"backgroundColor":"success","className":"js-accept","style":{"spacing":{"padding":{"top":"var:preset|spacing|xs","bottom":"var:preset|spacing|xs"}}}} -->
							<div class="wp-block-button js-accept">
								<a class="wp-block-button__link has-success-background-color has-background wp-element-button" style="padding-top:var(--wp--preset--spacing--xs);padding-bottom:var(--wp--preset--spacing--xs)">' . esc_html__( 'Accept', 'glimfse' ) . '</a>
							</div>
							<!-- /wp:button -->
						</div>
						<!-- /wp:buttons -->
					</div>
					<!-- /wp:column -->
				</div>
				<!-- /wp:columns -->
				'
		] );
	}

	/**
	 * Add Cookies to the default template part areas.
	 *
	 * @param 	array	$default	An array of supported area objects.
	 * @return 	array
	 */
	public function template_area( $default ): array {
		$template_part_area = [
			'area'        => self::CONTEXT,
			'label'       => esc_html__( 'Cookies', 'glimfse' ),
			'description' => esc_html__( 'The Cookies templates notifies and provides users with access to the cookies manager (soon).', 'glimfse' ),
			'icon'        => 'footer',
			'area_tag'    => 'div',
		];

		return array_merge( $default, [ $template_part_area ] );
	}

	/**
	 * Get file.
	 *
	 * @return string
	 */
	public function get_asset( string $type, string $name ): string {
		$file_path = glimfse_if( 'is_dev_mode' ) ? 'unminified' : 'minified';
		$file_name = glimfse_if( 'is_dev_mode' ) ? $name . '.' . $type :  $name . '.min.' . $type;
		$file_path = glimfse_config( 'paths' )['uri'] . '/inc/support/modules/cookies/assets/' . $file_path . '/' . $type . '/' . $file_name;

		return esc_url( $file_path );
	}

	/**
	 * Get offcanvas.
	 *
	 * @return 	string
	 */
	private function get_content( string $slug = '' ) {
		if( empty( $slug ) ) {
			return '';
		}

		$check_query_args = [
			'post_type'      => 'wp_template_part',
			'posts_per_page' => -1,
			'no_found_rows'  => true,
			'post_name__in'	 => [ $slug ],
			'tax_query'      => [
				[
					'taxonomy' => 'wp_theme',
					'field'    => 'name',
					'terms'    => [ get_stylesheet() ],
				]
			],
		];

		$check_query		= new \WP_Query( $check_query_args );
		$saved_templates 	= $check_query->posts;

		if( count( $saved_templates ) ) {
			$template = '<!-- wp:template-part {"slug":"' . $slug . '","tagName":"div","theme":"' . get_stylesheet() . '"} /-->';
		} else {
			$template = '<!-- wp:pattern {"slug":"' .  get_stylesheet() . '/' . $slug . '"} /-->';
			$post_id_ = wp_insert_post( [
				'post_content' 	=> $template,
				'post_type'		=> 'wp_template_part',
				'post_title'	=> esc_html__( join( ' ', array_map( 'ucfirst', explode( '-', $slug ) ) ), 'glimfse' ),
				'post_name'		=> $slug,
				'post_status'	=> 'publish',
			] );
			wp_set_object_terms( $post_id_, [ get_stylesheet() ], 'wp_theme' );
			wp_set_object_terms( $post_id_, [ self::CONTEXT ], 'wp_template_part_area' );
		}

		return do_blocks( $template );
	}

	/**
	 * Get categories.
	 *
	 * @return 	array
	 */
	private function get_categories(): array {
		return apply_filters( 'glimfse/filter/support/cookies/categories', [
			'null'		=> esc_html__( 'All', 'glimfse' ),
			'necessary'	=> esc_html__( 'Necessary', 'glimfse' ),
			'other'		=> esc_html__( 'Other', 'glimfse' ),
		] );
	}

	/**
	 * Insert defaults.
	 *
	 * @return 	void
	 */
	public function insert_defaults(): void {
		if( ! glimfse_option( 'cookies' ) ) {
			glimfse_option( [
				'cookies' => self::get_defaults()
			] );
		}
	}

    /**
	 * Get defaults.
	 *
	 * @return 	array
	 */
	public static function get_defaults(): array {
		return [
			'notice'		=> true,
			'scan'			=> '',
			'cookies'		=> [
				'block'				=> true,
				'expire'			=> 30,
				'necessary'			=> 'wordpress_test_cookie,woocommerce_cart_hash,woocommerce_items_in_cart',
				'necessaryPrefix' 	=> 'PHPSESSID,wordpress_sec_,wp-settings-,wp-cookies-,wordpress_logged_in_,wp_woocommerce_session_',
			],
			'offcanvas'		=> [
				'position'	=> 'bottom',
				'scroll'	=> false,
				'backdrop'	=> true,
				'keyboard'	=> false,
				'close' 	=> false,
				'title' 	=> esc_html__( 'Cookies', 'glimfse' ),
				'style'		=> [
					'backgroundColor' => '#ffffff',
					'color'	=> '#1b1b1b'
				]
			],
			'modal'			=> [
				'position'		=> 'centered',
				'backdrop'		=> 'static',
				'closeOffcanvas'=> true,
				'close' 		=> true,
				'keyboard'		=> false,
				'title' 		=> esc_html__( 'Your privacy policy', 'glimfse' ),
				'style'			=> [
					'backgroundColor' => '',
					'color'	=> ''
				]
			],
			'toast'			=> [
				'enable'	=> true,
				'delay'		=> 5000,
				'confirm'	=> esc_html__( 'Your cookies preferences are saved.', 'glimfse' ),
				'reject'	=> esc_html__( 'Your rejected cookies - some functionalities might not work as expected.', 'glimfse' ),
			],
			'toggler'	=> [
				'position'	=> 'left',
				'style'		=> [
					'left'		=> 16,
					'bottom'	=> 20,
					'width'		=> 45,
					'height'	=> 45,
					'padding'	=> 5,
					'backgroundColor' 	=> '#ffffff',
					'color'				=> '#1b1b1b',
					'borderRadius'		=> 100,
					'border'	=> [
						'color'	=> '#ffffff',
						'style'	=> 'solid',
						'width'	=> '1px',
					],
				]
			]
		];
	}
}

// Example API usage on how to add cookie information to container.
// $cookies = glimfse( 'support' )->get( 'modules/cookies' )::get_instance();
// $cookies->manager->set( [
// 	'cookie' => [
// 		'duration' 		=> '3 days',
//		'description'	=> 'Description',
//		'category'		=> 'necessary',
// 	],
// ] );