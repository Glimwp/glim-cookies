<?php
/**
 * GlimFSE Framework.
 *
 * WARNING: This file is part of the core GlimFSE Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	GlimFSE Framework
 * @subpackage 	Support\Modules\Cookies
 * @copyright   Copyright (c) 2024, GlimFSE Framework
 * @since 		6.5.2
 * @version		6.5.2
 */

namespace GlimFSE\Support\Modules\Cookies;

defined( 'ABSPATH' ) || exit;

use function GlimFSE\Functions\get_prop;

/**
 * The Helpers object.
 */
trait Helpers {

	/**
	 * Remove specific cookies if they are not strictly necessary.
	 *
	 * @param 	string|null	$blocked 	Optional. Blocked cookies.
	 *
	 * @return 	void
	 */
	private function remove_specific_cookies( ?string $blocked = null ): void {
		list( $a, $b ) = $this->get_necessary_cookies();
		
		$blocked_cookies = [];
        if ( $blocked ) {
            $blocked_cookies = array_unique( array_map( 'trim', explode( ',', sanitize_text_field( $blocked ) ) ) );
        }

        // Remove cookies from $_COOKIE superglobal
        foreach ( $_COOKIE as $name => $value ) {
            if ( ! $this->is_necessary_cookie( $name, $a, $b ) ) {
                if ( ! $blocked || in_array( $name, $blocked_cookies ) ) {
                    $this->set_cookie( $name, '', ( time() - 8640000 ) );
                    unset( $_COOKIE[ $name ] );
                }
            }
        }

		// Remove headers that set non-strictly necessary cookies
        foreach ( headers_list() as $h ) {
            if ( preg_match('/Set-Cookie: (.+?)=/si', $h, $m ) && ! $this->is_necessary_cookie( $m[1], $a, $b ) ) {
                if ( ! $blocked || in_array( $m[1], $blocked_cookies ) ) {
                    header_remove( 'Set-Cookie' );
                }
            }
        }
	}

	/**
     * Get strictly necessary cookies from the configuration.
     *
     * @return 	array	An array containing two arrays: necessary cookies and necessary family cookies
     */
    private function get_necessary_cookies(): array {
        // Define strictly necessary cookies
		$cookies 	= array_map( 'trim', explode( ',', get_prop( $this->config, [ 'cookies', 'necessary' ], '' ) ) );
		
        // Define strictly necessary cookies patterns
		$families 	= array_map( 'trim', explode( ',', get_prop( $this->config, [ 'cookies', 'necessaryPrefix' ], '' ) ) );
		$families[]	= 'wp-cookies-'; // Adding our prefix

        return [ array_unique( $cookies ), array_unique( $families ) ];
    }

	/**
	 * Check if specific cookies are strictly necessary.
	 *
	 * @param 	string	$name
	 * @param 	array	$necessary
	 * @param 	array 	$necessary_family
	 *
	 * @return 	bool
	 */
	private function is_necessary_cookie( $name, $necessary, $necessary_family ): bool {
		if ( in_array( $name, $necessary ) ) {
			return true;
		}

		foreach ( $necessary_family as $pattern ) {
			if ( preg_match( '/^' . preg_quote( $pattern, '/' ) . '(|.+?)/si', $name ) ) {
				return true;
			}
		}

		return false;
	}

	/**
	 * Set cookie
	 *
	 * @param 	string 		$name
	 * @param 	string 		$value
	 * @param 	int 		$expire
	 * @param 	bool 		$secure
	 * 
	 * @return 	void
	 */
	private function set_cookie( $name, $value, $expire = 0, $secure = false ): void {
		if ( ! headers_sent() ) {
			setcookie( $name, $value, $expire, COOKIEPATH, COOKIE_DOMAIN, $secure );
		} elseif ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
			headers_sent( $file, $line );
			trigger_error( "{$name} cookie cannot be set - headers already sent by {$file} on line {$line}", E_USER_NOTICE ); // @codingStandardsIgnoreLine
		}
	}
}